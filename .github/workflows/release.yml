name: Release

on:
  push:
    tags:
      - 'prompter-v*'

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v5
      - name: Get version
        id: version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#prompter-}
          echo "version=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version_number=$VERSION" >> $GITHUB_OUTPUT
      - name: Validate version consistency
        shell: bash
        run: |
          TAG_VERSION=$(echo "${{ steps.version.outputs.version }}" | sed 's/prompter-v//')
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "üè∑Ô∏è  Tag version: $TAG_VERSION"
          echo "üì¶ Cargo version: $CARGO_VERSION"
          if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
            echo "‚ùå ERROR: Tag version ($TAG_VERSION) doesn't match Cargo.toml version ($CARGO_VERSION)"
            echo "This indicates the tag was created before the version was bumped in Cargo.toml"
            echo "Please use 'versioneer' to manage versions and create tags atomically"
            exit 1
          fi
          echo "‚úÖ Version consistency validated"
      - name: Create Release
        run: |
          gh release create ${{ steps.version.outputs.version }} \
            --title "Prompter ${{ steps.version.outputs.version_number }}" \
            --generate-notes \
            --draft \
            --repo workhelix/prompter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-upload:
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
      - name: Verify version consistency
        shell: bash
        run: |
          EXPECTED_VERSION=$(echo "${{ needs.create-release.outputs.version }}" | sed 's/prompter-v//')
          # Verify the Cargo.toml version matches the tag
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "üè∑Ô∏è  Tag version: $EXPECTED_VERSION"
          echo "üì¶ Cargo.toml version: $CARGO_VERSION"
          if [ "$EXPECTED_VERSION" != "$CARGO_VERSION" ]; then
            echo "‚ùå ERROR: Tag version ($EXPECTED_VERSION) doesn't match Cargo.toml version ($CARGO_VERSION)"
            echo "This indicates a version synchronization problem"
            exit 1
          fi
          echo "‚úÖ Version consistency verified for ${{ matrix.target }}"
      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          # Binary name (matches the name in Cargo.toml)
          bin: prompter
          # Target platform (one per matrix job)
          target: ${{ matrix.target }}
          # Include additional files in the release archive
          include: LICENSE,README.md,CLAUDE.md,examples
          # Use tar.gz for Unix, zip for Windows
          tar: unix
          zip: windows
          # Generate SHA256 checksums
          checksum: sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-release:
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    steps:
      - name: Publish Release
        run: |
          gh release edit ${{ needs.create-release.outputs.version }} \
            --draft=false \
            --repo workhelix/prompter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
