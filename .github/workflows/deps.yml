name: Dependencies

on:
  schedule:
    - cron: '0 8 * * 1'
  workflow_dispatch:
  push:
    paths:
      - 'Cargo.toml'
      - 'Cargo.lock'

env:
  CARGO_TERM_COLOR: always

jobs:
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@1.86.0

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit --deny warnings

      - name: Create issue on security vulnerability
        if: failure()
        uses: actions/github-script@v8
        with:
          script: |
            const title = 'ðŸš¨ Security vulnerability detected in dependencies';
            const body = `A security vulnerability has been detected in the project dependencies.\n\nRun locally:\n\n\`\`\`bash\n cargo audit\n\`\`\`\n\nThis issue was automatically created by the dependency security scan.`;
            const issues = await github.rest.issues.listForRepo({ owner: context.repo.owner, repo: context.repo.repo, state: 'open', labels: ['security', 'dependencies'] });
            const existingIssue = issues.data.find(issue => issue.title.includes('Security vulnerability detected'));
            if (!existingIssue) {
              await github.rest.issues.create({ owner: context.repo.owner, repo: context.repo.repo, title: title, body: body, labels: ['security', 'dependencies', 'bug'] });
            }

  outdated:
    name: Check Outdated Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@1.86.0

      - name: Install cargo-outdated
        run: cargo install cargo-outdated

      - name: Check for outdated dependencies
        run: |
          echo "## Outdated Dependencies Report" > outdated-report.md
          echo '' >> outdated-report.md
          echo '```' >> outdated-report.md
          cargo outdated --root-deps-only >> outdated-report.md || echo "No outdated dependencies found." >> outdated-report.md
          echo '```' >> outdated-report.md

      - name: Upload outdated report
        uses: actions/upload-artifact@v4
        with:
          name: outdated-dependencies-report
          path: outdated-report.md

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, Unlicense

  minimal-versions:
    name: Test Minimal Versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@1.86.0

      - name: Generate minimal lockfile
        run: |
          # Switch to nightly for -Z minimal-versions
          rustup default nightly
          cargo update -Z minimal-versions
          rustup default stable

      - name: Test with minimal versions
        run: cargo test --all

      - name: Restore original lockfile
        run: git checkout -- Cargo.lock

  msrv-check:
    name: MSRV Compatibility
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install MSRV toolchain
        uses: dtolnay/rust-toolchain@1.70.0

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: msrv-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check MSRV compatibility
        run: |
          cargo check --all
          cargo test --all

      - name: Install cargo-msrv
        run: cargo install cargo-msrv

      - name: Verify MSRV
        run: cargo msrv --output-format json

  licenses:
    name: License Compatibility Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@1.86.0

      - name: Install cargo-deny
        run: cargo install cargo-deny

      - name: Create deny.toml config
        run: |
          cat > deny.toml << 'EOF'
          [licenses]
          # Acceptable licenses for dependencies
          allow = [
              "MIT",
              "Apache-2.0",
              "Apache-2.0 WITH LLVM-exception",
              "BSD-2-Clause",
              "BSD-3-Clause",
              "ISC",
              "Unicode-DFS-2016",
              "Unlicense",
          ]

          # Licenses that are explicitly denied
          deny = [
              "GPL-2.0",
              "GPL-3.0",
              "AGPL-1.0",
              "AGPL-3.0",
          ]

          [bans]
          # Multiple versions of the same crate
          multiple-versions = "warn"
          wildcards = "allow"

          [advisories]
          # Warn about security vulnerabilities
          vulnerability = "deny"
          unmaintained = "warn"
          yanked = "warn"
          notice = "warn"
          EOF

      - name: Check licenses and security
        run: cargo deny check

  unused-deps:
    name: Check Unused Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: Install cargo-udeps
        run: cargo install cargo-udeps

      - name: Check for unused dependencies
        run: cargo +nightly udeps --all-targets
